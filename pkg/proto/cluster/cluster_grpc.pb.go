// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: cluster.proto

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterService_Join_FullMethodName              = "/proto.ClusterService/Join"
	ClusterService_Leave_FullMethodName             = "/proto.ClusterService/Leave"
	ClusterService_SyncNodeStatus_FullMethodName    = "/proto.ClusterService/SyncNodeStatus"
	ClusterService_SyncSubscriptions_FullMethodName = "/proto.ClusterService/SyncSubscriptions"
	ClusterService_ForwardPublish_FullMethodName    = "/proto.ClusterService/ForwardPublish"
	ClusterService_BatchUpdateRoutes_FullMethodName = "/proto.ClusterService/BatchUpdateRoutes"
	ClusterService_SyncConfig_FullMethodName        = "/proto.ClusterService/SyncConfig"
	ClusterService_GetClusterStats_FullMethodName   = "/proto.ClusterService/GetClusterStats"
)

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 集群服务接口定义
type ClusterServiceClient interface {
	// 节点加入集群
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// 节点离开集群
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// 同步节点状态
	SyncNodeStatus(ctx context.Context, in *SyncNodeStatusRequest, opts ...grpc.CallOption) (*SyncNodeStatusResponse, error)
	// 同步订阅关系
	SyncSubscriptions(ctx context.Context, in *SyncSubscriptionsRequest, opts ...grpc.CallOption) (*SyncSubscriptionsResponse, error)
	// 转发发布消息
	ForwardPublish(ctx context.Context, in *PublishForward, opts ...grpc.CallOption) (*ForwardAck, error)
	// 批量更新路由
	BatchUpdateRoutes(ctx context.Context, in *BatchUpdateRoutesRequest, opts ...grpc.CallOption) (*BatchUpdateRoutesResponse, error)
	// 同步集群配置
	SyncConfig(ctx context.Context, in *SyncConfigRequest, opts ...grpc.CallOption) (*SyncConfigResponse, error)
	// 获取集群统计信息
	GetClusterStats(ctx context.Context, in *ClusterStatsRequest, opts ...grpc.CallOption) (*ClusterStatsResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ClusterService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, ClusterService_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) SyncNodeStatus(ctx context.Context, in *SyncNodeStatusRequest, opts ...grpc.CallOption) (*SyncNodeStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncNodeStatusResponse)
	err := c.cc.Invoke(ctx, ClusterService_SyncNodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) SyncSubscriptions(ctx context.Context, in *SyncSubscriptionsRequest, opts ...grpc.CallOption) (*SyncSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncSubscriptionsResponse)
	err := c.cc.Invoke(ctx, ClusterService_SyncSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ForwardPublish(ctx context.Context, in *PublishForward, opts ...grpc.CallOption) (*ForwardAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardAck)
	err := c.cc.Invoke(ctx, ClusterService_ForwardPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) BatchUpdateRoutes(ctx context.Context, in *BatchUpdateRoutesRequest, opts ...grpc.CallOption) (*BatchUpdateRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateRoutesResponse)
	err := c.cc.Invoke(ctx, ClusterService_BatchUpdateRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) SyncConfig(ctx context.Context, in *SyncConfigRequest, opts ...grpc.CallOption) (*SyncConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncConfigResponse)
	err := c.cc.Invoke(ctx, ClusterService_SyncConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetClusterStats(ctx context.Context, in *ClusterStatsRequest, opts ...grpc.CallOption) (*ClusterStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterStatsResponse)
	err := c.cc.Invoke(ctx, ClusterService_GetClusterStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations must embed UnimplementedClusterServiceServer
// for forward compatibility.
//
// 集群服务接口定义
type ClusterServiceServer interface {
	// 节点加入集群
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// 节点离开集群
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// 同步节点状态
	SyncNodeStatus(context.Context, *SyncNodeStatusRequest) (*SyncNodeStatusResponse, error)
	// 同步订阅关系
	SyncSubscriptions(context.Context, *SyncSubscriptionsRequest) (*SyncSubscriptionsResponse, error)
	// 转发发布消息
	ForwardPublish(context.Context, *PublishForward) (*ForwardAck, error)
	// 批量更新路由
	BatchUpdateRoutes(context.Context, *BatchUpdateRoutesRequest) (*BatchUpdateRoutesResponse, error)
	// 同步集群配置
	SyncConfig(context.Context, *SyncConfigRequest) (*SyncConfigResponse, error)
	// 获取集群统计信息
	GetClusterStats(context.Context, *ClusterStatsRequest) (*ClusterStatsResponse, error)
	mustEmbedUnimplementedClusterServiceServer()
}

// UnimplementedClusterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterServiceServer struct{}

func (UnimplementedClusterServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedClusterServiceServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedClusterServiceServer) SyncNodeStatus(context.Context, *SyncNodeStatusRequest) (*SyncNodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNodeStatus not implemented")
}
func (UnimplementedClusterServiceServer) SyncSubscriptions(context.Context, *SyncSubscriptionsRequest) (*SyncSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSubscriptions not implemented")
}
func (UnimplementedClusterServiceServer) ForwardPublish(context.Context, *PublishForward) (*ForwardAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPublish not implemented")
}
func (UnimplementedClusterServiceServer) BatchUpdateRoutes(context.Context, *BatchUpdateRoutesRequest) (*BatchUpdateRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateRoutes not implemented")
}
func (UnimplementedClusterServiceServer) SyncConfig(context.Context, *SyncConfigRequest) (*SyncConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncConfig not implemented")
}
func (UnimplementedClusterServiceServer) GetClusterStats(context.Context, *ClusterStatsRequest) (*ClusterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStats not implemented")
}
func (UnimplementedClusterServiceServer) mustEmbedUnimplementedClusterServiceServer() {}
func (UnimplementedClusterServiceServer) testEmbeddedByValue()                        {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_SyncNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).SyncNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_SyncNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).SyncNodeStatus(ctx, req.(*SyncNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_SyncSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).SyncSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_SyncSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).SyncSubscriptions(ctx, req.(*SyncSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ForwardPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishForward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ForwardPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_ForwardPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ForwardPublish(ctx, req.(*PublishForward))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_BatchUpdateRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).BatchUpdateRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_BatchUpdateRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).BatchUpdateRoutes(ctx, req.(*BatchUpdateRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_SyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).SyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_SyncConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).SyncConfig(ctx, req.(*SyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_GetClusterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusterStats(ctx, req.(*ClusterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ClusterService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ClusterService_Leave_Handler,
		},
		{
			MethodName: "SyncNodeStatus",
			Handler:    _ClusterService_SyncNodeStatus_Handler,
		},
		{
			MethodName: "SyncSubscriptions",
			Handler:    _ClusterService_SyncSubscriptions_Handler,
		},
		{
			MethodName: "ForwardPublish",
			Handler:    _ClusterService_ForwardPublish_Handler,
		},
		{
			MethodName: "BatchUpdateRoutes",
			Handler:    _ClusterService_BatchUpdateRoutes_Handler,
		},
		{
			MethodName: "SyncConfig",
			Handler:    _ClusterService_SyncConfig_Handler,
		},
		{
			MethodName: "GetClusterStats",
			Handler:    _ClusterService_GetClusterStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
