syntax = "proto3";

package proto;
option go_package = "github.com/turtacn/emqx-go/pkg/proto/cluster;clusterpb";

// NodeInfo contains basic information about a node in the cluster.
message NodeInfo {
  // Unique identifier for the node.
  string node_id = 1;
  // Network address of the node (e.g., "ip:port").
  string address = 2;
  // Version of the EMQX application running on the node.
  string version = 3;
  // Uptime of the node in seconds.
  int64 uptime = 4;
  // Status of the node (e.g., 1=running, 2=offline, 3=starting).
  int32 status = 5;
  // Timestamp of the last time the node was seen active.
  int64 last_seen = 6;
}

// JoinRequest is sent by a node when it wants to join the cluster.
message JoinRequest {
  // Information about the node that is joining.
  NodeInfo node = 1;
  // Authentication token for the cluster.
  string token = 2;
  // Timestamp of the request.
  int64 timestamp = 3;
}

// JoinResponse is the response to a JoinRequest.
message JoinResponse {
  // Indicates whether the join was successful.
  bool success = 1;
  // A message providing details about the result of the join operation.
  string message = 2;
  // List of all nodes currently in the cluster.
  repeated NodeInfo cluster_nodes = 3;
  // Unique identifier for the cluster.
  string cluster_id = 4;
}

// LeaveRequest is sent by a node when it wants to leave the cluster.
message LeaveRequest {
  // ID of the node that is leaving.
  string node_id = 1;
  // Whether to force the node to leave.
  bool force = 2;
}

// LeaveResponse is the response to a LeaveRequest.
message LeaveResponse {
  // Indicates whether the leave operation was successful.
  bool success = 1;
  // A message providing details about the result of the leave operation.
  string message = 2;
  // List of nodes remaining in the cluster.
  repeated NodeInfo remaining_nodes = 3;
}

// SyncNodeStatusRequest is sent to synchronize the status of nodes.
message SyncNodeStatusRequest {
  // The node sending the synchronization request.
  NodeInfo node = 1;
  // The list of nodes known to the sender.
  repeated NodeInfo known_nodes = 2;
}

// SyncNodeStatusResponse is the response to a SyncNodeStatusRequest.
message SyncNodeStatusResponse {
  // Indicates whether the synchronization was successful.
  bool success = 1;
  // A message providing details about the result of the synchronization.
  string message = 2;
  // The complete list of all nodes in the cluster.
  repeated NodeInfo all_nodes = 3;
}

// Subscription represents a single client subscription.
message Subscription {
  // ID of the client that made the subscription.
  string client_id = 1;
  // The topic filter for the subscription.
  string topic_filter = 2;
  // The Quality of Service level for the subscription.
  int32 qos = 3;
  // Whether to prevent the subscriber from receiving its own messages.
  bool no_local = 4;
  // Whether to retain the message's published status.
  bool retain_as_published = 5;
  // The policy for handling retained messages.
  int32 retain_handling = 6;
}

// SyncSubscriptionsRequest is sent to synchronize subscriptions between nodes.
message SyncSubscriptionsRequest {
  // ID of the node sending the request.
  string node_id = 1;
  // List of subscriptions to be synchronized.
  repeated Subscription subscriptions = 2;
  // Whether this is a full synchronization or an incremental update.
  bool full_sync = 3;
}

// SyncSubscriptionsResponse is the response to a SyncSubscriptionsRequest.
message SyncSubscriptionsResponse {
  // Indicates whether the subscription synchronization was successful.
  bool success = 1;
  // A message providing details about the result.
  string message = 2;
  // The number of subscriptions received.
  int32 received_count = 3;
}

// PublishForward is used to forward a published message to another node.
message PublishForward {
  // Unique ID for the message.
  string message_id = 1;
  // The topic the message was published to.
  string topic = 2;
  // The message payload.
  bytes payload = 3;
  // The Quality of Service level of the message.
  int32 qos = 4;
  // Whether this is a retained message.
  bool retain = 5;
  // Whether this is a duplicate message.
  bool dup = 6;
  // ID of the node where the message originated.
  string from_node = 7;
  // ID of the client that published the message.
  string from_client = 8;
  // Timestamp of when the message was published.
  int64 timestamp = 9;
  // User-defined properties of the message.
  map<string, bytes> user_properties = 10;
}

// ForwardAck is the acknowledgment for a forwarded publish message.
message ForwardAck {
  // ID of the message being acknowledged.
  string message_id = 1;
  // Indicates whether the forwarding was successful.
  bool success = 2;
  // A message providing details about the result.
  string message = 3;
  // ID of the node that acknowledged the message.
  string to_node = 4;
}

// Route represents the routing information for a topic.
message Route {
  // The topic filter.
  string topic = 1;
  // List of node IDs that are responsible for this topic.
  repeated string node_ids = 2;
  // Timestamp of the last update to this route.
  int64 update_time = 3;
}

// BatchUpdateRoutesRequest is used to update routing information in bulk.
message BatchUpdateRoutesRequest {
  // List of routes to be updated.
  repeated Route routes = 1;
  // The type of operation ("add", "delete", "update").
  string op_type = 2;
  // ID of the node that initiated the update.
  string from_node = 3;
}

// BatchUpdateRoutesResponse is the response to a BatchUpdateRoutesRequest.
message BatchUpdateRoutesResponse {
  // Indicates whether the update was successful.
  bool success = 1;
  // A message providing details about the result.
  string message = 2;
  // The number of routes that were updated.
  int32 updated_count = 3;
}

// SyncConfigRequest is sent to synchronize configuration between nodes.
message SyncConfigRequest {
  // ID of the node sending the request.
  string node_id = 1;
  // The configuration key to synchronize (or all if empty).
  string config_key = 2;
  // Key-value pairs of the configuration to be synchronized.
  map<string, string> configs = 3;
}

// SyncConfigResponse is the response to a SyncConfigRequest.
message SyncConfigResponse {
  // Indicates whether the synchronization was successful.
  bool success = 1;
  // A message providing details about the result.
  string message = 2;
  // The full configuration (only returned for a full sync request).
  map<string, string> configs = 3;
}

// ClusterStatsRequest is sent to request statistics from the cluster.
message ClusterStatsRequest {
  // The specific node to get stats from (or all if empty).
  string node_id = 1;
  // The specific metrics to retrieve (or all if empty).
  repeated string metrics = 2;
}

// NodeStats contains the statistics for a single node.
message NodeStats {
  // ID of the node these stats belong to.
  string node_id = 1;
  // Key-value pairs of the statistical metrics.
  map<string, int64> metrics = 2;
  // Timestamp of when the stats were collected.
  int64 timestamp = 3;
}

// ClusterStatsResponse is the response to a ClusterStatsRequest.
message ClusterStatsResponse {
  // Indicates whether the request was successful.
  bool success = 1;
  // A message providing details about the result.
  string message = 2;
  // List of statistics for each node.
  repeated NodeStats node_stats = 3;
  // Timestamp of when the cluster-wide stats were collected.
  int64 timestamp = 4;
}

// ClusterService defines the gRPC service for cluster communication.
service ClusterService {
  // Allows a node to join the cluster.
  rpc Join(JoinRequest) returns (JoinResponse);

  // Allows a node to leave the cluster.
  rpc Leave(LeaveRequest) returns (LeaveResponse);

  // Synchronizes the status of nodes in the cluster.
  rpc SyncNodeStatus(SyncNodeStatusRequest) returns (SyncNodeStatusResponse);

  // Synchronizes client subscriptions across the cluster.
  rpc SyncSubscriptions(SyncSubscriptionsRequest) returns (SyncSubscriptionsResponse);

  // Forwards a published message to another node for local delivery.
  rpc ForwardPublish(PublishForward) returns (ForwardAck);

  // Updates routing information in bulk across the cluster.
  rpc BatchUpdateRoutes(BatchUpdateRoutesRequest) returns (BatchUpdateRoutesResponse);

  // Synchronizes configuration between nodes.
  rpc SyncConfig(SyncConfigRequest) returns (SyncConfigResponse);

  // Retrieves statistical information from the cluster.
  rpc GetClusterStats(ClusterStatsRequest) returns (ClusterStatsResponse);
}