// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clusterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// ClusterServiceClient is the client API for ClusterService service.
type ClusterServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	SyncSubscriptions(ctx context.Context, in *SyncSubscriptionsRequest, opts ...grpc.CallOption) (*SyncSubscriptionsResponse, error)
	ForwardPublish(ctx context.Context, in *PublishForward, opts ...grpc.CallOption) (*ForwardAck, error)
	UpdateRoutes(ctx context.Context, in *RouteUpdateBatch, opts ...grpc.CallOption) (*ForwardAck, error)
	HeartbeatStream(ctx context.Context, opts ...grpc.CallOption) (ClusterService_HeartbeatStreamClient, error)
	StreamRouteUpdates(ctx context.Context, in *RouteUpdateBatch, opts ...grpc.CallOption) (ClusterService_StreamRouteUpdatesClient, error)
}

// client implementation (generated)
type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/Join", in, out, opts...)
	if err != nil { return nil, err }
	return out, nil
}

// ... other unary RPCs ...

// HeartbeatStream client-side streaming interface (generated)
type ClusterService_HeartbeatStreamClient interface {
	Send(*Heartbeat) error
	Recv() (*HeartbeatAck, error)
	grpc.ClientStream
}

func (c *clusterServiceClient) HeartbeatStream(ctx context.Context, opts ...grpc.CallOption) (ClusterService_HeartbeatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClusterService_ServiceDesc.Streams[0], "/cluster.ClusterService/HeartbeatStream", opts...)
	if err != nil { return nil, err }
	x := &clusterServiceHeartbeatStreamClient{stream}
	return x, nil
}

// Server API for ClusterService service.
type ClusterServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	SyncSubscriptions(context.Context, *SyncSubscriptionsRequest) (*SyncSubscriptionsResponse, error)
	ForwardPublish(context.Context, *PublishForward) (*ForwardAck, error)
	UpdateRoutes(context.Context, *RouteUpdateBatch) (*ForwardAck, error)
	HeartbeatStream(ClusterService_HeartbeatStreamServer) error
	StreamRouteUpdates(*RouteUpdateBatch, ClusterService_StreamRouteUpdatesServer) error
}

// Register function (server-side)
func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

// Service descriptor (used by grpc)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	// Methods and Streams descriptors...
}
