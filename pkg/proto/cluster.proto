syntax = "proto3";

package cluster;

// 指定生成 Go 包路径（请根据你的模块名调整）
option go_package = "github.com/turtacn/emqx-go/proto/cluster;clusterpb";

import "google/protobuf/timestamp.proto";

// Node 信息（用于 Join/Leave，以及心跳/状态报告）
message NodeInfo {
  string node_id = 1;
  string addr = 2;           // ip:port 或 host:port
  string version = 3;
  google.protobuf.Timestamp started_at = 4;
}

// Join/Leave RPC
message JoinRequest {
  NodeInfo node = 1;
}

message JoinResponse {
  bool ok = 1;
  string message = 2;
}

// Leave RPC
message LeaveRequest {
  string node_id = 1;
}

message LeaveResponse {
  bool ok = 1;
  string message = 2;
}

// Subscription sync: 当节点要把它的订阅表同步给其它节点时使用
message Subscription {
  string topic = 1;
  string client_id = 2;
  uint32 qos = 3;
  bool shared = 4;
  string share_group = 5;
  google.protobuf.Timestamp subscribed_at = 6;
}

message SyncSubscriptionsRequest {
  string node_id = 1;
  repeated Subscription subs = 2;
}

message SyncSubscriptionsResponse {
  bool ok = 1;
  string message = 2;
}

// Publish forwarding: 把 Publish 包转发到其他节点
message PublishForward {
  string topic = 1;
  bytes payload = 2;
  uint32 qos = 3;
  bool retain = 4;
  string publisher_node_id = 5;
  // 可选：用于保持消息顺序/幂等
  string message_id = 6;
  google.protobuf.Timestamp ts = 7;
}

message ForwardAck {
  bool ok = 1;
  string message = 2;
}

// 路由表更新（简单增量更新）
enum RouteOperation {
  ROUTE_OP_UNSPECIFIED = 0;
  ROUTE_OP_ADD = 1;
  ROUTE_OP_REMOVE = 2;
}

message RouteEntry {
  string topic = 1;
  string node_id = 2; // 哪个节点对该 topic 有订阅
  RouteOperation op = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message RouteUpdateBatch {
  repeated RouteEntry entries = 1;
}

// 心跳 / 双向流（可用于长连接监控）
message Heartbeat {
  string node_id = 1;
  google.protobuf.Timestamp ts = 2;
  uint64 uptime_seconds = 3;
  uint32 active_sessions = 4;
  // 可拓展：指标摘要（json 或 protobuf map）
  string metrics_json = 10;
}

message HeartbeatAck {
  bool ok = 1;
  string message = 2;
}

// 服务定义
service ClusterService {
  // 节点加入集群
  rpc Join(JoinRequest) returns (JoinResponse);

  // 节点离开集群
  rpc Leave(LeaveRequest) returns (LeaveResponse);

  // 同步订阅表（一次性 RPC — 用于启动/恢复期间的全量同步）
  rpc SyncSubscriptions(SyncSubscriptionsRequest) returns (SyncSubscriptionsResponse);

  // 转发 Publish 到目标节点
  rpc ForwardPublish(PublishForward) returns (ForwardAck);

  // 增量路由更新（一次性批量）
  rpc UpdateRoutes(RouteUpdateBatch) returns (ForwardAck);

  // 长连接心跳（双向 stream 可用于心跳 + server push 路由更新/通知）
  rpc HeartbeatStream(stream Heartbeat) returns (stream HeartbeatAck);

  // 路由更新流：server -> client streaming (或双向按需)
  rpc StreamRouteUpdates(RouteUpdateBatch) returns (stream RouteEntry);
}
